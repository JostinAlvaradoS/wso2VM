{"version":3,"file":"805.f71d33426eec057449b7.bundle.js","mappings":"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","sources":["webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/AsyncAPI/Steps/ProvideAsyncAPI.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/GraphQL/Steps/ProvideGraphQL.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/OpenAPI/Steps/ValidationResults.tsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/OpenAPI/Steps/ProvideOpenAPI.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/WSDL/Steps/ProvideWSDL.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/APIDefinition/LinterUI/LinterUI.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/apiSecurityConstants.js","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/ProductResources/MethodView.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/ProductResources/ProductResourcesEditWorkspace.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Shared/DropZoneLocal.jsx","webpack://@wso2apim/publisher/./source/src/app/data/Wsdl.js","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/APIDefinition/Linting/APILintingSummary.tsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/APIDefinition/Linting/Linting.tsx"],"sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@mui/material/Radio';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Banner from 'AppComponents/Shared/Banner';\nimport APIValidation from 'AppData/APIValidation';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport CheckCircleSharpIcon from '@mui/icons-material/CheckCircleSharp';\nimport Chip from '@mui/material/Chip';\n\nconst PREFIX = 'ProvideAsyncAPI';\n\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using AsyncAPI UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using AsyncAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideAsyncAPI(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const { inputType, inputValue } = apiInputs;\n\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({});\n    const [isValidating, setIsValidating] = useState(false);\n    const [validationErrors, setValidationErrors] = useState([]);\n    const [gatewayVendor, setGatewayVendor] = useState('wso2');\n    const intl = useIntl();\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one AsyncAPI file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateAsyncAPIByFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, info, errors },\n                } = response;\n                setGatewayVendor(info.gatewayVendor);\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    // eslint-disable-next-line max-len\n                    setValidity({\n                        ...isValid, file: {\n                            message: intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.content.'\n                                    + 'validation.failed',\n                                defaultMessage: 'AsyncAPI content validation failed! ',\n                            })\n                        }\n                    });\n                    setValidationErrors(errors);\n                }\n            })\n            .catch((error) => {\n                setValidity({\n                    ...isValid, file: {\n                        message: intl.formatMessage({\n                            id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.content.'\n                                + 'validation.failed',\n                            defaultMessage: 'AsyncAPI content validation failed! ',\n                        })\n                    }\n                });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    /**\n     * Trigger the provided onValidate call back on each input validation run\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object returned from Joi `.validate()` method\n     */\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        // State `null` means URL is valid, We do backend validation only in valid URLs\n        if (state === null) {\n            setIsValidating(true);\n            API.validateAsyncAPIByUrl(apiInputs.inputValue, { returnContent: true }).then((response) => {\n                const {\n                    body: {\n                        isValid: isValidURL, info, content, errors,\n                    },\n                } = response;\n                if (isValidURL) {\n                    info.content = content;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, url: null });\n                } else {\n                    setValidity({\n                        ...isValid, url: {\n                            message: intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.content.'\n                                    + 'validation.failed',\n                                defaultMessage: 'AsyncAPI content validation failed! ',\n                            })\n                        }\n                    });\n                    setValidationErrors(errors);\n                }\n                onValidate(isValidURL);\n                setIsValidating(false);\n            }).catch((error) => {\n                setValidity({ url: { message: error.message } });\n                onValidate(false);\n                setIsValidating(false);\n                console.error(error);\n            });\n            // Valid URL string\n            // TODO: Handle catch network or api call failures ~tmkb\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            if (inputType === ProvideAsyncAPI.INPUT_TYPES.FILE) {\n                onDrop([inputValue]);\n            } else if (inputType === ProvideAsyncAPI.INPUT_TYPES.URL) {\n                validateURL(inputValue);\n            }\n        }\n    }, [inputType, inputValue]);\n\n    // TODO: Use validation + input to separate component that can be share with wsdl,swagger,graphql URL inputs ~tmkb\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    return (\n        <Root>\n            <Grid container>\n                <Grid item xs={12} sx={{ mb: 2 }}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                data-testid='input-asyncapi-url'\n                                value={ProvideAsyncAPI.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.url.label',\n                                    defaultMessage: 'AsyncAPI URL',\n                                })}\n                            />\n                            <FormControlLabel\n                                data-testid='input-asyncapi-file'\n                                value={ProvideAsyncAPI.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.file.label',\n                                    defaultMessage: 'AsyncAPI File',\n                                })}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isValid.file\n                && (\n                    <Grid item md={12}>\n                        <Banner\n                            onClose={() => setValidity({ file: null })}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={isValid.file.message}\n                            errors={validationErrors}\n                        />\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    {isFileInput ? (\n                        <>\n                            {apiInputs.inputValue ? (\n                                <List>\n                                    <ListItem key={apiInputs.inputValue.path}>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <InsertDriveFile />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={`${apiInputs.inputValue.path} -\n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton\n                                                edge='end'\n                                                aria-label='delete'\n                                                onClick={() => {\n                                                    inputsDispatcher({ action: 'inputValue', value: null });\n                                                    inputsDispatcher({ action: 'isFormValid', value: false });\n                                                }}\n                                                size='large'>\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            ) : (\n                                <DropZoneLocal\n                                    error={isValid.file}\n                                    onDrop={onDrop}\n                                    files={apiInputs.inputValue}\n                                    accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.json,application/json,.yaml,.yml'\n                                >\n                                    {isValidating ? (<CircularProgress />)\n                                        : ([\n                                            <FormattedMessage\n                                                id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.file.dropzone'\n                                                defaultMessage={'Drag & Drop AsyncAPI File '\n                                                + 'here {break} or {break} Browse files'}\n                                                values={{ break: <br /> }}\n                                            />,\n                                            <Button\n                                                data-testid='upload-api-file'\n                                                color='primary'\n                                                variant='contained'\n                                                sx={{ mt: 1 }}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.file.upload'\n                                                    defaultMessage='Browse File to Upload'\n                                                />\n                                            </Button>,\n                                        ]\n                                        )}\n                                </DropZoneLocal>\n                            )}\n                        </>\n                    ) : (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width'\n                            label={intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.url.label',\n                                defaultMessage: 'AsyncAPI URL',\n                            })}\n                            placeholder={intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.url.text.placeholder',\n                                defaultMessage: 'Enter AsyncAPI URL',\n                            })}\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            // 'Give the URL of AsyncAPI endpoint'\n                            helperText={(isValid.url && isValid.url.message)\n                                || (\n                                    <FormattedMessage\n                                        id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.url.helper.text'\n                                        defaultMessage='Click away to validate the URL'\n                                    />\n                                )}\n                            error={isInvalidURL}\n                        />\n                    )}\n                </Grid>\n                { gatewayVendor === 'solace' && (\n                    <Grid item xs={10} md={11}>\n                        <Chip\n                            data-testid='solace-api-label'\n                            label={intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.solace.api.label',\n                                defaultMessage: 'Identified as Solace Event Portal API',\n                            })}\n                            icon={<CheckCircleSharpIcon style={{ color: 'green' }} />}\n                            variant='outlined'\n                            style={{ color: 'green' }}\n                        />\n                    </Grid>\n                )}\n                <Grid item xs={2} md={5} />\n            </Grid>\n        </Root>\n    );\n}\n\nProvideAsyncAPI.defaultProps = {\n    onValidate: () => { },\n};\nProvideAsyncAPI.INPUT_TYPES = {\n    URL: 'url',\n    FILE: 'file',\n};\nProvideAsyncAPI.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport Banner from 'AppComponents/Shared/Banner';\n\nconst PREFIX = 'ProvideGraphQL';\n\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using GraphQL UI, This is handling the taking input of GraphQL file or URL from the user\n * In the create API using OpenAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideGraphQL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const { inputValue } = apiInputs;\n\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({ file: null });\n    const [isValidating, setIsValidating] = useState(false);\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one graphQL file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateGraphQLFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, graphQLInfo },\n                } = response;\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'graphQLInfo', value: graphQLInfo });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                }\n            })\n            .catch((error) => {\n                setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            onDrop([inputValue]);\n        }\n    }, [inputValue]);\n    const accept = '.graphql,text/plain';\n    return (\n        <Root>\n            <Grid container>\n                {!apiInputs.inputValue && (\n                    <Grid item md={12} sx={{ mb: 2 }}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>\n                                <>\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                    {' '}\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.type'\n                                        defaultMessage='Provide GraphQL File'\n                                    />\n                                </>\n                            </FormLabel>\n                        </FormControl>\n                    </Grid>\n                )}\n                {isValid.file\n                    && (\n                        <Grid item md={12}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isValid.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={12}>\n                    {apiInputs.inputValue ? (\n                        <List data-testid='uploaded-list-graphql'>\n                            <ListItem key={apiInputs.inputValue.path} data-testid='uploaded-list-content-graphql' >\n                                <ListItemAvatar>\n                                    <Avatar>\n                                        <InsertDriveFile />\n                                    </Avatar>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary={`${apiInputs.inputValue.path} - \n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                    data-testid={'file-input-'+apiInputs.inputValue.path}\n                                />\n                                <ListItemSecondaryAction>\n                                    <IconButton\n                                        edge='end'\n                                        aria-label='delete'\n                                        onClick={() => {\n                                            inputsDispatcher({ action: 'inputValue', value: null });\n                                            inputsDispatcher({ action: 'isFormValid', value: false });\n                                        }}\n                                        data-testid='btn-delete-imported-file'\n                                        size='large'>\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                    ) : (\n                        <DropZoneLocal\n                            error={isValid.file}\n                            onDrop={onDrop}\n                            files={apiInputs.inputValue}\n                            accept={accept}\n                            ariaLabel='GraphQL file upload'\n                        >\n                            {isValidating ? (<CircularProgress />)\n                                : ([\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.dropzone'\n                                        defaultMessage={'Drag & Drop files here {break} or {break} '\n                                        + 'Browse files{break}({accept})'}\n                                        values={{ break: <br />, accept }}\n                                    />,\n                                    <Button\n                                        color='primary'\n                                        variant='contained'\n                                        data-testid='browse-to-upload-btn'\n                                        sx={{ mt: 1 }}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.upload'\n                                            defaultMessage='Browse File to Upload'\n                                        />\n                                    </Button>,\n                                ]\n                                )}\n                        </DropZoneLocal>\n                    )}\n                </Grid>\n            </Grid>\n        </Root>\n    );\n}\n\nProvideGraphQL.defaultProps = {\n    onValidate: () => {},\n};\nProvideGraphQL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from \"react\";\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CircularProgress, Grid, List, ListItem, \n    ListItemIcon, ListItemText, Typography } from '@mui/material';\nimport { ExpandMore } from '@mui/icons-material';\nimport { FormattedMessage } from \"react-intl\";\nimport LinterUI from \"AppComponents/Apis/Details/APIDefinition/LinterUI/LinterUI\";\nimport APILintingSummary from \"AppComponents/Apis/Details/APIDefinition/Linting/APILintingSummary\";\nimport {  \n    spectralSeverityMap as severityMap } from \"../../../Details/APIDefinition/Linting/Linting\"\n\ntype APILintingProps = {\n    inputValue: any,\n    isValidating: boolean,\n    isLinting: boolean,\n    linterResults: any,\n    validationErrors: any,\n    onLinterLineSelect: Function,\n};\n\nexport default function ValidationResults(props: APILintingProps) {\n    const {inputValue, isValidating, isLinting, linterResults, validationErrors, onLinterLineSelect} = props;\n    const [expandValidationErrors, setExpandValidationErrors] = useState(true);\n    const [expandLinterResults, setExpandLinterResults] = useState(false);\n    const [linterSelectedSeverity, setLinterSelectedSeverity] = useState(-1);\n\n\n    return (\n        (<>\n            <Grid item xs={10} md={12}>\n                <List>\n                    {inputValue && isValidating && (\n                        <ListItem>\n                            <ListItemIcon><CircularProgress /></ListItemIcon>\n                            <ListItemText>\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ValidationResults.validating'\n                                    defaultMessage='Validating API definition'\n                                />\n                            </ListItemText>\n                        </ListItem>\n                    )}\n                    {inputValue && !isValidating && isLinting && (\n                        <ListItem>\n                            <ListItemIcon><CircularProgress /></ListItemIcon>\n                            <ListItemText>\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ValidationResults.linting'\n                                    defaultMessage='Generating Linter Results'\n                                />\n                            </ListItemText>\n                        </ListItem>\n                    )}\n                </List>\n            </Grid>\n            {!isValidating && validationErrors.length>0 && (\n                <Grid item xs={10} md={12}>\n                    <Accordion\n                        expanded={expandValidationErrors}\n                        onChange={()=>{setExpandValidationErrors(!expandValidationErrors)}}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore/>}\n                            aria-controls='panel1bh-content'\n                            id='panel1bh-header'>\n                            <Grid container direction='row' \n                                justifyContent='space-between' alignItems='center'>\n                                <Typography sx={{ fontWeight: 600 }}>\n                                    <FormattedMessage\n                                        id='Apis.Create.OpenAPI.Steps.ValidationResults.validation.errros'\n                                        defaultMessage='Validation Errors'\n                                    />\n                                </Typography>\n                            </Grid>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <List>\n                                {validationErrors.map((error:any)=>(\n                                    <ListItem>\n                                        <ListItemIcon>\n                                            {severityMap[0]}\n                                        </ListItemIcon>\n                                        <ListItemText>\n                                            <Typography>\n                                                <Box sx={{ fontWeight: 'bold' }}>{error.message}</Box>\n                                            </Typography>\n                                            <Typography>{error.description}</Typography>\n                                        </ListItemText>\n                                    </ListItem>\n                                    \n                                ))}\n                            </List>\n                            \n                        </AccordionDetails>\n                        \n                    </Accordion>\n                </Grid>\n            )}\n            {!isLinting && linterResults.length>0 && (\n                <Grid item xs={10} md={12}\n                    data-testid='itest-id-linter-results' sx={{ pt: 2 }}>\n                    <Accordion\n                        expanded={expandLinterResults}\n                        onChange={()=>{setExpandLinterResults(!expandLinterResults)}}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore />}\n                            aria-controls='panel1bh-content'\n                            id='panel1bh-header'>\n                            <Grid container direction='row' \n                                justifyContent='space-between' alignItems='center'>\n                                <Typography sx={{ fontWeight: 600 }}>\n                                    <FormattedMessage\n                                        id='Apis.Create.OpenAPI.Steps.ValidationResults.linter.results'\n                                        defaultMessage='Linter Results'\n                                    />\n                                </Typography>\n                                <APILintingSummary\n                                    linterResults={ linterResults }\n                                    handleChange = { (event:any, value:any)=>{\n                                        event.stopPropagation();\n                                        setLinterSelectedSeverity(value);\n                                        setExpandLinterResults(true);\n                                    } }\n                                />\n                            </Grid>\n                        </AccordionSummary>\n                        <AccordionDetails\n                            style={{padding:0}}>\n                            <LinterUI\n                                linterResults={ linterResults.filter(\n                                    (item: any)=> linterSelectedSeverity===-1||\n                                            item.severity===Number(linterSelectedSeverity))\n                                }\n                                severityMap={ severityMap }\n                                handleRowClick={ (line: any) => { \n                                    if(onLinterLineSelect) onLinterLineSelect(line);\n                                } }\n                            />\n                        </AccordionDetails>\n                    </Accordion>\n                </Grid>\n            )}\n        </>)\n    );\n}","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@mui/material/Radio';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport debounce from 'lodash.debounce'; // WARNING: This is coming from mui-datatable as a transitive dependency\nimport YAML from 'js-yaml';\n\nimport APIValidation from 'AppData/APIValidation';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport {  \n    getLinterResultsFromContent } from \"../../../Details/APIDefinition/Linting/Linting\";\nimport ValidationResults from './ValidationResults';\n\nconst PREFIX = 'ProvideOpenAPI';\n\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using OpenAPI UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using OpenAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideOpenAPI(props) {\n    const { apiInputs, inputsDispatcher, onValidate, onLinterLineSelect } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const { inputType, inputValue } = apiInputs;\n\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({});\n    const [linterResults, setLinterResults] = useState ([]);\n    const [validationErrors, setValidationErrors] = useState([]);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isLinting, setIsLinting] = useState(false);\n    \n    const intl = useIntl();\n\n    function lint(content) {\n        // Validate and linting\n        setIsLinting(true);\n        getLinterResultsFromContent(content).then((results)=>{\n            if (results) {\n                setLinterResults(results);\n            } else {\n                setLinterResults([]);\n            }\n        }).finally(()=>{setIsLinting(false);});\n    }\n\n    function reset() {\n        setIsLinting(false);\n        setLinterResults([]);\n        setValidationErrors([]);\n        inputsDispatcher({ action: 'importingContent', value: null });\n        inputsDispatcher({ action: 'inputValue', value: null });\n        inputsDispatcher({ action: 'isFormValid', value: false });\n    }\n\n    function hasJSONStructure (definition) {\n        if (typeof definition !== 'string') return false;\n        try {\n            const result = JSON.parse(definition);\n            return result && typeof result === 'object';\n        } catch (err) {\n            console.log(\"API definition is in not in JSON format\");\n            return false;\n        }\n    }\n\n    const validateURLDebounced = useCallback(\n        debounce((newURL) => { // Example: https://codesandbox.io/s/debounce-example-l7fq3?file=/src/App.js\n            API.validateOpenAPIByUrl(newURL, { returnContent: true }).then((response) => {\n                const {\n                    body: {\n                        isValid: isValidURL, info, content, errors,\n                    },\n                } = response;\n                if (isValidURL) {\n                    let formattedContent;\n                    if (hasJSONStructure(content)) {\n                        formattedContent = JSON.stringify(JSON.parse(content), null, 2);\n                    } else {\n                        formattedContent = JSON.stringify(YAML.load(content), null, 2);\n                    }\n                    lint(formattedContent);\n                    inputsDispatcher({ action: 'importingContent', value: formattedContent});\n                    info.content = content;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, url: null });\n                    setValidationErrors([]);\n                } else {\n                    setValidity({ ...isValid, url: { message: intl.formatMessage({\n                        id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                        defaultMessage: 'OpenAPI content validation failed!'\n                    }) } });\n                    setValidationErrors(errors);\n                }\n                onValidate(isValidURL);\n                setIsValidating(false);\n            }).catch((error) => {\n                setValidity({ url: { message: error.message } });\n                onValidate(false);\n                setIsValidating(false);\n                console.error(error);\n                \n            });\n        }, 750),\n        [],\n    );\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one OpenAPI file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateOpenAPIByFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, info, errors },\n                } = response;\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    setValidity({\n                        ...isValid, file: {\n                            message: intl.formatMessage({\n                                id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                                defaultMessage: 'OpenAPI content validation failed!'\n                            })\n                        }\n                    });\n                    setValidationErrors(errors);\n                }\n            })\n            .catch((error) => {\n                setValidity({\n                    ...isValid, file: {\n                        message: intl.formatMessage({\n                            id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                            defaultMessage: 'OpenAPI content validation failed!'\n                        })\n                    }\n                });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: file });\n            });\n\n        if (!file.path.endsWith(\".zip\")){\n            const read = new FileReader();\n            read.readAsText(file);\n            read.onloadend = function(){\n                const content = read.result?.toString();\n                inputsDispatcher({ action: 'importingContent', value: content });\n                lint(content);\n            }\n        }\n    }\n\n    /**\n     * Trigger the provided onValidate call back on each input validation run\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object returned from Joi `.validate()` method\n     */\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        // State `null` means URL is valid, We do backend validation only if it's a valid URL\n        if (state === null) {\n            setIsValidating(true);\n            validateURLDebounced(apiInputs.inputValue);\n            // Valid URL string\n            // TODO: Handle catch network or api call failures ~tmkb\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        reset();\n    }, [inputType]);\n\n    useEffect(() => {\n        if (inputValue) {\n            if (inputType === ProvideOpenAPI.INPUT_TYPES.FILE) {\n                onDrop([inputValue]);\n            } else if (inputType === ProvideOpenAPI.INPUT_TYPES.URL) {\n                validateURL(inputValue);\n            }\n        }\n    }, [inputType, inputValue]);\n\n    // TODO: Use validation + input to separate component that can be share with wsdl,swagger,graphql URL inputs ~tmkb\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end' id='url-validated'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    return (\n        <Root>\n            <Grid container>\n                <Grid item xs={12} sx={{ mb: 2 }}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input Source'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', \n                                value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                disabled={isLinting || isValidating}\n                                value={ProvideOpenAPI.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.OpenAPI.create.api.form.url.label',\n                                    defaultMessage: 'OpenAPI URL',\n                                })}\n                                id='open-api-url-select-radio'\n                            />\n                            <FormControlLabel\n                                disabled={isLinting || isValidating}\n                                value={ProvideOpenAPI.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.OpenAPI.create.api.form.file.label',\n                                    defaultMessage: 'OpenAPI File/Archive',\n                                })}\n                                aria-label='OpenAPI File/Archive'\n                                id='open-api-file-select-radio'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                    {isFileInput ? (\n                        <>\n                            {apiInputs.inputValue ? (\n                                <List>\n                                    <ListItem key={apiInputs.inputValue.path}>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <InsertDriveFile />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={`${apiInputs.inputValue.path} -\n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton edge='end' aria-label='delete' onClick={reset} size='large'>\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            ) : (\n                                <DropZoneLocal\n                                    error={isValid.file}\n                                    onDrop={onDrop}\n                                    files={apiInputs.inputValue}\n                                    accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.json,application/json,.yaml'\n                                >\n                                    {isValidating ? (<CircularProgress />)\n                                        : ([\n                                            <FormattedMessage\n                                                id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.dropzone'\n                                                defaultMessage={'Drag & Drop Open API File/Archive '\n                                                 + 'here {break} or {break} Browse files'}\n                                                values={{ break: <br /> }}\n                                            />,\n                                            <Button\n                                                color='primary'\n                                                variant='contained'\n                                                id='browse-to-upload-btn'\n                                                onClick={ reset }\n                                                sx={{ mt: 1 }}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.upload'\n                                                    defaultMessage='Browse File to Upload'\n                                                />\n                                            </Button>,\n                                        ]\n                                        )}\n                                </DropZoneLocal>\n                            )}\n                        </>\n                    ) : (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width'\n                            label={intl.formatMessage({\n                                id: 'Apis.Create.OpenAPI.create.api.url.label',\n                                defaultMessage: 'OpenAPI URL',\n                            })}\n                            placeholder={intl.formatMessage({\n                                id: 'Apis.Create.OpenAPI.create.api.url.placeholder',\n                                defaultMessage: 'Enter OpenAPI URL',\n                            })}\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            // 'Give the URL of OpenAPI endpoint'\n                            helperText={(isValid.url && isValid.url.message)\n                                || (\n                                    <FormattedMessage\n                                        id='Apis.Create.OpenAPI.create.api.url.helper.text'\n                                        defaultMessage='Click away to validate the URL'\n                                    />\n                                )}\n                            error={isInvalidURL}\n                            data-testid='swagger-url-endpoint'\n                        />\n                    )}\n                </Grid>\n                <ValidationResults \n                    inputValue={inputValue} \n                    isValidating={isValidating}\n                    isLinting={isLinting}\n                    validationErrors={validationErrors}\n                    linterResults={linterResults}\n                    onLinterLineSelect={onLinterLineSelect}\n                />\n                <Grid item xs={2} md={5} />\n            </Grid>\n        </Root>\n    );\n}\n\nProvideOpenAPI.defaultProps = {\n    onValidate: () => { },\n};\nProvideOpenAPI.INPUT_TYPES = {\n    URL: 'url',\n    FILE: 'file',\n};\nProvideOpenAPI.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@mui/material/Radio';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport CheckIcon from '@mui/icons-material/Check';\n\nimport APIValidation from 'AppData/APIValidation';\nimport Wsdl from 'AppData/Wsdl';\nimport Banner from 'AppComponents/Shared/Banner';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\n\nconst PREFIX = 'ProvideWSDL';\n\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using WSDL UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using WSDL wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideWSDL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const isGenerateRESTAPI = apiInputs.type === 'SOAPTOREST';\n\n    const [isError, setValidity] = useState(); // If valid value is `null` else an error object will be there\n    const [isValidating, setIsValidating] = useState(false);\n    const isCreateMode = apiInputs.mode === 'create';\n\n    const intl = useIntl();\n    /**\n     * Handles WSDL validation response and returns the state.\n     *\n     * @param {*} response WSDL validation response\n     * @param {string} type of the input; file or url\n     * @returns {boolean} validation status\n     */\n    function handleWSDLValidationResponse(response, type) {\n        const isWSDLValid = response.body.isValid;\n        let success = false;\n        if (isWSDLValid) {\n            if (type === 'file') {\n                setValidity({ ...isError, file: null });\n            } else {\n                setValidity({ ...isError, url: null });\n            }\n            success = true;\n        } else if (type === 'file') {\n            setValidity({\n                ...isError, file: {\n                    message: intl.formatMessage({\n                        id: 'Apis.Create.WSDL.content.validation.file.failed',\n                        defaultMessage: 'WSDL content validation failed!',\n                    }),\n                }\n            });\n        } else {\n            setValidity({\n                ...isError, url: {\n                    message: intl.formatMessage({\n                        id: 'Apis.Create.WSDL.content.validation.url.failed',\n                        defaultMessage: 'Invalid WSDL URL!',\n                    }),\n                }\n            });\n        }\n        onValidate(isWSDLValid);\n        setIsValidating(false);\n        return success;\n    }\n\n    /**\n     * Handles WSDL validation error response.\n     *\n     * @param error {*} error object\n     * @param type {string} file/url type\n     */\n    function handleWSDLValidationErrorResponse(error, type) {\n        let message = intl.formatMessage({\n            id: 'Apis.Create.WSDL.validation.error.response',\n            defaultMessage: 'Error occurred during validation',\n        });\n        if (error.response && error.response.body.description) {\n            message = error.response.body.description;\n        }\n        if (type === 'file') {\n            setValidity({ ...isError, file: { message } });\n        } else {\n            setValidity({ ...isError, url: { message } });\n        }\n        setIsValidating(false);\n    }\n\n    /**\n     * Trigger the onValidate call back after validating WSDL url from the state.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object\n     */\n    function validateUrl(state) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateUrl(apiInputs.inputValue).then((response) => {\n                handleWSDLValidationResponse(response, 'url');\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'url');\n            });\n        } else {\n            setValidity({ ...isError, url: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     * Trigger the provided onValidate callback after validating the provided WSDL file.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {*} file WSDL file or archive\n     * @param {Object} state Validation state object\n     */\n    function validateFileOrArchive(file, state = null) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateFileOrArchive(file).then((response) => {\n                if (handleWSDLValidationResponse(response, 'file')) {\n                    inputsDispatcher({ action: 'inputValue', value: file });\n                }\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'file');\n            });\n        } else {\n            setValidity({ ...isError, file: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        // Why `files[0]` below is , We only handle one wsdl file at a time, So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        validateFileOrArchive(files[0]);\n    }\n\n    /**\n     *  Render uploaded WSDL schema list\n     */\n    function renderUploadedList() {\n        return (\n            <List>\n                <ListItem key={apiInputs.inputValue.path}>\n                    <ListItemAvatar>\n                        <Avatar>\n                            <InsertDriveFile />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={`${apiInputs.inputValue.path} - ${humanFileSize(apiInputs.inputValue.size)}`}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton\n                            edge='end'\n                            aria-label='delete'\n                            onClick={() => {\n                                inputsDispatcher({ action: 'inputValue', value: null });\n                                inputsDispatcher({ action: 'isFormValid', value: false });\n                            }}\n                            size='large'>\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n        );\n    }\n\n    const dropBoxControlLabel = isGenerateRESTAPI ? (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.dropzone'\n            defaultMessage='Drag & Drop WSDL file {break} -or-'\n            values={{ break: <br /> }}\n        />\n    ) : (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.archive.dropzone'\n            defaultMessage='Drag & Drop WSDL file/archive {break} -or-'\n            values={{ break: <br /> }}\n        />\n    );\n\n    /**\n     * Render file upload UI.\n     *\n     */\n    function renderFileUpload() {\n        if (apiInputs.inputValue) {\n            return renderUploadedList();\n        }\n        // TODO: Pass message saying accepting only one file ~tmkb\n        return (\n            <DropZoneLocal\n                error={isError && isError.file}\n                onDrop={onDrop}\n                files={apiInputs.inputValue}\n                accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.wsdl'\n            >\n                {isValidating ? (<CircularProgress />)\n                    : (\n                        (<Root>\n                            { dropBoxControlLabel }\n                            <Button\n                                color='primary'\n                                variant='contained'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.upload'\n                                    defaultMessage='Browse File to Upload'\n                                />\n                            </Button>\n                        </Root>)\n                    )}\n            </DropZoneLocal>\n        );\n    }\n\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isError && isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <ErrorOutlineIcon fontSize='large' color='error' />\n            </InputAdornment>\n        );\n    } else if (isError && !isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CheckIcon fontSize='large' color='primary' />\n            </InputAdornment>\n        );\n    }\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                {isCreateMode\n                && (\n                    <Grid item md={12}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>\n                                <>\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                    {' '}\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.implementation.type'\n                                        defaultMessage='Implementation Type'\n                                    />\n                                </>\n                            </FormLabel>\n                            <RadioGroup\n                                aria-label='Implementation type'\n                                value={apiInputs.type ? apiInputs.type : 'SOAP'}\n                                onChange={\n                                    (event) => {\n                                        inputsDispatcher({ action: 'type', value: event.target.value });\n                                        inputsDispatcher({ action: 'isFormValid', value: false });\n                                        inputsDispatcher({ action: 'inputValue', value: null });\n                                        inputsDispatcher({ action: 'inputType', value: 'url' });\n                                    }\n                                }\n                            >\n                                <FormControlLabel\n                                    value='SOAP'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.passthrough.label'\n                                            defaultMessage='Pass Through'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='SOAPTOREST'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.SOAPtoREST.label'\n                                            defaultMessage='Generate REST APIs'\n                                        />\n                                    )}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                )}\n                <Grid item md={12}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                value='url'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.url.label'\n                                        defaultMessage='WSDL URL'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='file'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.file.label.wsdl.file.archive'\n                                        defaultMessage='WSDL File/Archive'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isError && isError.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isError.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={11}>\n                    {isFileInput ? renderFileUpload()\n                        : (\n                            <TextField\n                                autoFocus\n                                id='outlined-full-width'\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.WSDL.url.label',\n                                    defaultMessage: 'WSDL URL',\n                                })}\n                                placeholder={intl.formatMessage({\n                                    id: 'Apis.Create.WSDL.url.placeholder',\n                                    defaultMessage: 'Enter WSDL URL',\n                                })}\n                                fullWidth\n                                margin='normal'\n                                variant='outlined'\n                                onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                                value={apiInputs.inputValue}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    onBlur: ({ target: { value } }) => {\n                                        validateUrl(APIValidation.url.required().validate(value).error);\n                                    },\n                                    endAdornment: urlStateEndAdornment,\n                                }}\n                                helperText={\n                                    (isError && isError.url && isError.url.message)\n                                    || intl.formatMessage({\n                                        id: 'Apis.Create.WSDL.url.helper.text',\n                                        defaultMessage: 'Click away to validate the URL',\n                                    })\n                                }\n                                error={isError && Boolean(isError.url)}\n                                disabled={isValidating}\n                            />\n                        )}\n\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nProvideWSDL.defaultProps = {\n    onValidate: () => { },\n};\nProvideWSDL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        mode: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/* eslint-disable */\n/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under\n * this license, please see the license as well as any agreement you’ve\n * entered into with WSO2 governing the purchase of this software and any\n * associated services.\n */\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport { spectralSeverityMap as severityMap} from '../Linting/Linting'\n\nconst PREFIX = 'LinterUI';\n\nconst classes = {\n    tableCell: `${PREFIX}-tableCell`,\n    headerTableCell: `${PREFIX}-headerTableCell`,\n    tableRow: `${PREFIX}-tableRow`,\n    tableWrapper: `${PREFIX}-tableWrapper`,\n    headerTableRow: `${PREFIX}-headerTableRow`\n};\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n    [`& .${classes.tableCell}`]: {\n        border: 'none',\n        fontSize: '10px !important',\n    },\n\n    [`& .${classes.headerTableCell}`]: {\n        background: theme.palette.background.paper,\n        fontSize: 10,\n        fontWeight: 'bold',\n        border: 'none',\n    },\n\n    [`& .${classes.tableRow}`]: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n        cursor: 'pointer',\n    },\n\n    [`& .${classes.tableWrapper}`]: {\n        '& table tr td:first-of-type': {\n            width: 10,\n        },\n        '& table tr td:nth-of-type(2)': {\n            width: 10,\n        },\n    },\n\n    [`& .${classes.headerTableRow}`]: {\n        display: 'flex',\n    }\n}));\n\nexport default function LinterUI(props) {\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const { linterResults, handleRowClick } = props;\n\n\n    function getData(type, line, message, code) {\n        return { type, line, message, code};\n    }\n\n    const columns = [\n        { id: 'type',\n            label: 'Type',\n            minWidth: 50,\n        },\n        { id: 'line',\n            label: 'Line',\n            minWidth: 50\n        },\n        {\n            id: 'message',\n            label: 'Message',\n            minWidth: 170,\n            align: 'left',\n        },\n    ];\n\n    const  rows = linterResults.map((item, index) => getData(\n            severityMap[item.severity],\n            item.range.start.line + 1, \n            item.message,\n            index,\n    ));\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <StyledPaper sx={{ width: '100%', overflow: 'hidden' }}>\n            <TableContainer sx={{ maxHeight: 440 }} className={classes.tableWrapper}>\n                <Table stickyHeader aria-label='linter-table'>\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    className={classes.headerTableCell}\n                                    style={{ minWidth: column.minWidth }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row) => {\n                                return (\n                                    <TableRow\n                                        key={row.code}\n                                        className={classes.tableRow}\n                                        onClick={() => handleRowClick(row.line)}\n                                    >\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell\n                                                    key={column.id}\n                                                    align={column.align}\n                                                    className={classes.tableCell}>\n                                                    {column.format && typeof value === 'number'\n                                                        ? column.format(value)\n                                                        : value}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component='div'\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </StyledPaper>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// Check this file for more info  <CARBON_APIMGT>/components/apimgt/org.wso2.carbon.apimgt.impl\n// /src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n\nconst DEFAULT_API_SECURITY_OAUTH2 = 'oauth2';\nconst API_SECURITY_BASIC_AUTH = 'basic_auth';\nconst API_SECURITY_API_KEY = 'api_key';\nconst API_SECURITY_MUTUAL_SSL = 'mutualssl';\nconst API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY = 'oauth_basic_auth_api_key_mandatory';\nconst API_SECURITY_MUTUAL_SSL_MANDATORY = 'mutualssl_mandatory';\nconst API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_OPTIONAL = 'oauth_basic_auth_api_key_optional';\nconst API_SECURITY_MUTUAL_SSL_OPTIONAL = 'mutualssl_optional';\nconst API_SECURITY_KEY_TYPE_PRODUCTION = 'PRODUCTION';\nconst API_SECURITY_KEY_TYPE_SANDBOX = 'SANDBOX';\nconst ALL_AUDIENCES_ALLOWED = 'all';\n\nexport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_OPTIONAL,\n    API_SECURITY_MUTUAL_SSL_OPTIONAL,\n    API_SECURITY_KEY_TYPE_PRODUCTION,\n    API_SECURITY_KEY_TYPE_SANDBOX,\n    ALL_AUDIENCES_ALLOWED,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport PropTypes from 'prop-types';\nimport Configurations from 'Config';\n\nfunction MethodView(props) {\n    console.info(Configurations.app);\n    const theme = useTheme();\n    const { method, className } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method.toLowerCase()] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method.toLowerCase()]);\n    }\n    return (\n        <Chip\n            label={method}\n            className={className || ''}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, width: 65,\n            }}\n        />\n    );\n}\nMethodView.propTypes = {\n    className: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n};\n\nexport default MethodView;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable array-callback-return */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"operationObj\"] }] */\n\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport Icon from '@mui/material/Icon';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport queryString from 'query-string';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport cloneDeep from 'lodash.clonedeep';\nimport PropTypes from 'prop-types';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport MethodView from 'AppComponents/Apis/Details/ProductResources/MethodView';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport CONSTS from 'AppData/Constants';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\n\nconst PREFIX = 'ProductResourcesEdit';\n\nconst classes = {\n    searchWrapper: `${PREFIX}-searchWrapper`,\n    paper: `${PREFIX}-paper`,\n    apiWrapper: `${PREFIX}-apiWrapper`,\n    ResourceWrapper: `${PREFIX}-ResourceWrapper`,\n    SelectedResourceWrapper: `${PREFIX}-SelectedResourceWrapper`,\n    leftMost: `${PREFIX}-leftMost`,\n    rightMost: `${PREFIX}-rightMost`,\n    colTitle: `${PREFIX}-colTitle`,\n    treeItemMain: `${PREFIX}-treeItemMain`,\n    treeItemMainWrapper: `${PREFIX}-treeItemMainWrapper`,\n    treeItem: `${PREFIX}-treeItem`,\n    hr: `${PREFIX}-hr`,\n    methodView: `${PREFIX}-methodView`,\n    middleText: `${PREFIX}-middleText`,\n    selectedApi: `${PREFIX}-selectedApi`,\n    selectedTitle: `${PREFIX}-selectedTitle`,\n    buttonWrapper: `${PREFIX}-buttonWrapper`,\n    selectedApiDescription: `${PREFIX}-selectedApiDescription`,\n    messageWrapper: `${PREFIX}-messageWrapper`,\n    tootBar: `${PREFIX}-tootBar`,\n    inactiveIcon: `${PREFIX}-inactiveIcon`\n};\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.searchWrapper}`]: {\n        padding: 0,\n        marginTop: theme.spacing(1),\n        '& input': {\n            padding: '12px 14px',\n        },\n        display: 'flex',\n    },\n\n    [`& .${classes.paper}`]: {\n        height: '100%',\n        borderRadius: 0,\n    },\n\n    [`& .${classes.apiWrapper}`]: {\n        overflowY: 'auto',\n        height: 349,\n    },\n\n    [`& .${classes.ResourceWrapper}`]: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        '& .frame': {\n            overflowY: 'auto',\n            height: 328,\n            border: '1px solid ' + theme.palette.grey[400],\n            borderRadius: theme.spacing(1),\n        },\n        '& .frame::-webkit-scrollbar': {\n            '-webkit-appearance': 'none',\n        },\n        '& .frame::-webkit-scrollbar:vertical': {\n            width: 11,\n        },\n        '& .frame::-webkit-scrollbar:horizontal': {\n            height: 11,\n        },\n        '& .frame::-webkit-scrollbar-thumb': {\n            borderRadius: theme.spacing(1),\n            border: '2px solid' + theme.palette.common.white,\n            backgroundColor: theme.palette.grey[400],\n        },\n        '& .frame.rightFrame': {\n            height: 369,\n        },\n    },\n\n    [`& .${classes.SelectedResourceWrapper}`]: {\n        overflowY: 'auto',\n        overflowX: 'auto',\n        height: 321,\n    },\n\n    [`& .${classes.leftMost}`]: {\n        background: theme.palette.grey[700],\n        color: theme.palette.getContrastText(theme.palette.grey[700]),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.rightMost}`]: {\n        background: theme.palette.grey[600],\n        color: theme.palette.getContrastText(theme.palette.grey[600]),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.colTitle}`]: {\n        background: theme.palette.grey[400],\n        color: theme.palette.getContrastText(theme.palette.grey[400]),\n        padding: theme.spacing(1),\n        fontWeight: 200,\n        minHeight: 25,\n    },\n\n    [`& .${classes.treeItemMain}`]: {\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.treeItemMainWrapper}`]: {\n        paddingLeft: theme.spacing(2),\n    },\n\n    [`& .${classes.treeItem}`]: {\n        '& .material-icons': {\n            fontSize: theme.spacing(2),\n            cursor: 'pointer',\n            marginRight: theme.spacing(1),\n        },\n        display: 'flex',\n        alignItems: 'center',\n        padding: '6px 0',\n    },\n\n    [`& .${classes.hr}`]: {\n        flex: 1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n    },\n\n    [`& .${classes.methodView}`]: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n\n    [`& .${classes.middleText}`]: {\n        flex: 1,\n    },\n\n    [`& .${classes.selectedApi}`]: {\n        background: theme.palette.grey[100],\n    },\n\n    [`& .${classes.selectedTitle}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.buttonWrapper}`]: {\n        marginTop: theme.spacing(2),\n        textDecorate: 'none',\n    },\n\n    [`& .${classes.selectedApiDescription}`]: {\n        padding: '0px 16px',\n    },\n\n    [`& .${classes.messageWrapper}`]: {\n        padding: theme.spacing(3),\n    },\n\n    [`& .${classes.tootBar}`]: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        margin: '0 16px',\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: 5,\n        borderRadius: 5,\n        '& a': {\n            cursor: 'pointer',\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n        },\n    },\n\n    [`& .${classes.inactiveIcon}`]: {\n        color: theme.palette.grey[300],\n    }\n}));\n\nconst resourceMethod = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n    PATCH: 'patch',\n    OPTIONS: 'options',\n    HEAD: 'head',\n};\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction ProductResourcesEdit(props) {\n\n    const {\n        apiResources, setApiResources, isStateCreate, api, resourceNotFountMessage,\n    } = props;\n\n    // Define states\n    const [allApis, setAllApis] = useState([]);\n    const [notFound, setNotFound] = useState(false);\n    const [searchText, setSearchText] = useState('');\n    const [selectedApiPaths, setSelectedApiPaths] = useState([]);\n    const [selectedApi, setSelectedApi] = useState(null);\n    const [fromSearch, setFromSearch] = useState(false);\n    // Initialize the rest api libraries\n    const apiRestClient = new API();\n    const intl = useIntl();\n    /**\n     * This method is filtering apis base on the searchText entered. In no searchText provided it will give all apis.\n     *\n     * @param {*} [text=null]\n     * @returns a promise\n     */\n    const filterAPIs = (text = null) => {\n        if (text) {\n            // Build the search query and update\n            const inputValue = text.trim().toLowerCase();\n            const composeQuery = '?query=name:' + inputValue + ' type:HTTP';\n            const composeQueryJSON = queryString.parse(composeQuery);\n            // TODO we need to make the limit and offset changeable from the UI ( paggination )\n            composeQueryJSON.limit = 100;\n            composeQueryJSON.offset = 0;\n            return API.search(composeQueryJSON);\n        } else {\n            return API.all({\n                query: {\n                    type: 'HTTP',\n                },\n            });\n        }\n    };\n\n    const isValidHttpVerb = (innerKey) => {\n        if (innerKey === resourceMethod.DELETE || innerKey === resourceMethod.POST\n                || innerKey === resourceMethod.GET || innerKey === resourceMethod.PUT\n                || innerKey === resourceMethod.PATCH || innerKey === resourceMethod.OPTIONS\n                || innerKey === resourceMethod.HEAD) {\n            return true;\n        }\n        return false;\n    };\n\n    const addPropsToSelectedApiPaths = (paths, apiId, latestApiResources = apiResources) => {\n        /* Add checked field to each resource object */\n        Object.keys(paths).map((key) => {\n            const methodObj = paths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                if (isValidHttpVerb(innerKey)) {\n                    methodObj[innerKey].checked = false;\n\n                    // We need to check the latestApiResources for the same\n                    // API/Resource Name / Verb and  indicate it differently\n                    // Loop latestApiResources object\n                    const target = key;\n                    const verb = innerKey;\n                    let resourceFound = false;\n                    if (latestApiResources) {\n                        Object.keys(latestApiResources).map((resourcekey) => {\n                            const apiResource = latestApiResources[resourcekey];\n\n                            // Check if the the api slected from UI is same as the operation api id checking\n                            if (apiResource && apiId === apiResource.apiId) {\n                                // API is the same\n                                Object.keys(apiResource.operations).map((operationKey) => {\n                                    const operation = apiResource.operations[operationKey];\n                                    if (\n                                        operation\n                                        && operation.target === target\n                                        && operation.verb.toLowerCase() === verb.toLowerCase()\n                                    ) {\n                                        // Operation is already there\n                                        resourceFound = true;\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    if (resourceFound) {\n                        methodObj[innerKey].allreadyAdded = true;\n                    } else {\n                        methodObj[innerKey].allreadyAdded = false;\n                    }\n                }\n            });\n        });\n        setSelectedApiPaths(paths);\n    };\n\n    // Get the api swagger after an api is selected\n    const getApiSwagger = (apiSelected) => {\n        const { id } = apiSelected;\n        const promisedAPI = apiRestClient.getSwagger(id);\n        promisedAPI\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    addPropsToSelectedApiPaths(response.obj.paths, id);\n                    setSelectedApi(apiSelected);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n    const handleSearchTextChange = (event) => {\n        const apiPromise = filterAPIs(event.target.value);\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.status !== 'PROTOTYPED');\n                if (filteredList.length > 0) {\n                    setSelectedApi(list[0]);\n                }\n                setAllApis(filteredList);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n        setSearchText(event.target.value);\n        setFromSearch(event.target.value);\n    };\n    const updateResourceTree = (resourceToAdd, action, inputApiResources = null) => {\n        let updateStateHere = false;\n        let newApiResources = null;\n        if (!inputApiResources) {\n            // If a copy of the state variable is not passed from the calling method we\n            // have to make a copy inside here before doing modifications to that\n            newApiResources = cloneDeep(apiResources);\n            updateStateHere = true;\n        } else {\n            newApiResources = inputApiResources;\n        }\n        const {\n            target, verb, apiId, name, version,\n        } = resourceToAdd;\n        const newResource = {\n            id: null,\n            target,\n            verb: verb.toUpperCase(),\n            authType: null,\n            throttlingPolicy: null,\n            scopes: [],\n        };\n        let apiFound = false;\n\n        // Loop copy of apiResources object\n        Object.keys(newApiResources).map((key, indexA) => {\n            const apiResource = newApiResources[key];\n\n            // Check if the the api slected from UI is same as the operation api id trying to remove.\n            if (apiResource && apiId === apiResource.apiId) {\n                apiFound = true;\n                let operationFound = false;\n                Object.keys(apiResource.operations).map((innerKey, indexB) => {\n                    const operation = apiResource.operations[innerKey];\n                    if (\n                        operation\n                        && operation.target === target\n                        && operation.verb.toLowerCase() === verb.toLowerCase()\n                    ) {\n                        // Operation is already there\n                        operationFound = true;\n                        if (action === 'remove') {\n                            if (apiResource.operations.length > 1) {\n                                apiResource.operations.splice(indexB, 1);\n                            } else {\n                                newApiResources.splice(indexA, 1);\n                            }\n                        }\n                    }\n                });\n                // Operation not added .. so we need to add that\n                if (!operationFound && action === 'add') {\n                    apiResource.operations.push(newResource);\n                }\n            }\n        });\n\n        if (!apiFound) {\n            // Add api object\n            newApiResources.push({\n                name,\n                apiId,\n                operations: [newResource],\n                version,\n            });\n        }\n        // When we are adding the resources in a loop we do not care about the return but we simply set the state here.\n        if (updateStateHere) {\n            setApiResources(newApiResources);\n            // We need to call this in order to set other properties\n            if (apiId === selectedApi.id) {\n                addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), apiId, newApiResources);\n            }\n        }\n        return newApiResources;\n    };\n\n    const updateCheckBox = (key, innerKey) => {\n        // we need to copy the object from the state and modify it before set it to the state\n        const prevSelectedApiPaths = { ...selectedApiPaths };\n\n        // Now we inverse the checked value\n        prevSelectedApiPaths[key][innerKey].checked = !prevSelectedApiPaths[key][innerKey].checked;\n\n        // Then we set state\n        setSelectedApiPaths(prevSelectedApiPaths);\n    };\n    const addSelectedResourcesToTree = (addAll = false) => {\n        /* Add checked field to each resource object */\n        const newApiResources = cloneDeep(apiResources);\n        Object.keys(selectedApiPaths).map((key) => {\n            const methodObj = selectedApiPaths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                if ((methodObj[innerKey].checked || addAll) && isValidHttpVerb(innerKey)) {\n                    // We need to add this to apiResources array\n                    updateResourceTree(\n                        {\n                            target: key,\n                            verb: innerKey,\n                            apiId: selectedApi.id,\n                            name: selectedApi.name,\n                            version: selectedApi.version,\n                        },\n                        'add',\n                        newApiResources,\n                    );\n                }\n            });\n        });\n        setApiResources(newApiResources);\n        addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), selectedApi.id, newApiResources);\n    };\n    useEffect(() => {\n        // Get all apis\n        const apiPromise = filterAPIs();\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.lifeCycleStatus !== 'PROTOTYPED' &&\n                    theApi.lifeCycleStatus !== 'RETIRED' && theApi.lifeCycleStatus !== 'DEPRECATED' &&\n                    theApi.gatewayType === 'wso2/synapse'\n                );\n\n                setAllApis(filteredList);\n                if (filteredList.length > 0) {\n                    setSelectedApi(filteredList[0]);\n                    getApiSwagger(filteredList[0]);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound message={resourceNotFountMessage} />;\n    }\n    return (\n        <Root>\n            {allApis.length === 0 && !fromSearch ? (\n                <Grid container>\n                    <Typography className={classes.messageWrapper}>\n                        <FormattedMessage\n                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.ApisnotFound'\n                            defaultMessage='No REST APIs are created yet'\n                        />\n                    </Typography>\n                </Grid>\n            ) : (\n                <>\n                    {!isStateCreate && (\n                        <Grid container>\n                            <>\n                                <Grid item xs={8} className={classes.leftMost}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.find.and.select'\n                                            defaultMessage='Find and select resources for the API Product'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.rightMost}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.selected'\n                                            defaultMessage='Selected resources of API Product'\n                                        />\n                                    </Typography>\n                                </Grid>\n                            </>\n                        </Grid>\n                    )}\n                    <Grid container>\n                        {/* ************************************************ */}\n                        {/* 1st column API search and select column          */}\n                        {/* ************************************************ */}\n                        <Grid item xs={3}>\n                            <div className={classes.colTitle}>\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesWorkspace.select.an.api'\n                                        defaultMessage='Select an API'\n                                    />\n                                </Typography>\n                            </div>\n                            <Paper>\n                                <div className={classes.searchWrapper}>\n                                    <TextField\n                                        id='outlined-full-width'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.ProductResources.ProductResourcesWorkspace.filter.'\n                                                    + 'an.api.label'}\n                                                defaultMessage='API'\n                                            />\n                                        )}\n                                        style={{ margin: 8 }}\n                                        placeholder={intl.formatMessage({\n                                            id: 'Apis.Details.ProductResources.ProductResourcesWorkspace.filter.'\n                                                + 'an.api.placeholder',\n                                            defaultMessage: 'Filter APIs',\n                                        })}\n                                        helperText={intl.formatMessage({\n                                            id: 'Apis.Details.ProductResources.ProductResourcesWorkspace.filter.'\n                                                + 'an.api.helper.text',\n                                            defaultMessage: 'Filter by name',\n                                        })}\n                                        onChange={handleSearchTextChange}\n                                        value={searchText}\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.apiWrapper}>\n                                    <List dense component='nav'>\n                                        {allApis.map((apiObj) => {\n                                            const labelId = `checkbox-list-label-${apiObj.id}`;\n\n                                            return (\n                                                <ListItem\n                                                    key={apiObj.id}\n                                                    role={undefined}\n                                                    dense\n                                                    button\n                                                    className={\n                                                        selectedApi\n                                                        && apiObj.id === selectedApi.id\n                                                        && classes.selectedApi\n                                                    }\n                                                >\n                                                    <ListItemText\n                                                        id={labelId}\n                                                        primary={apiObj.name}\n                                                        secondary={`${apiObj.version} - ${apiObj.context}`}\n                                                        onClick={() => getApiSwagger(apiObj)}\n                                                    />\n                                                </ListItem>\n                                            );\n                                        })}\n                                    </List>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* 2nd column Resource Selection                    */}\n                        {/* ************************************************ */}\n                        <Grid item xs={5}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesEdit.api.resources'\n                                            defaultMessage='Select API Resources'\n                                        />\n                                    </Typography>\n                                </div>\n                                {selectedApi && (\n                                    <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                        {selectedApi.name}\n                                    </Typography>\n                                )}\n                                <div className={classes.tootBar}>\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree()}\n                                        onKeyDown={() => addSelectedResourcesToTree()}\n                                        id='add-selected-resources'\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id={'Apis.Details.ProductResources.ProductResourcesWorkspace.'\n                                                    + 'toolbar.add.selected'}\n                                                defaultMessage='Add Selected'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                    <VerticalDivider />\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree(true)}\n                                        onKeyDown={() => addSelectedResourcesToTree(true)}\n                                        id='add-all-resources-btn'\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id={'Apis.Details.ProductResources.ProductResourcesWorkspace.' \n                                                    + 'toolbar.add.all'}\n                                                defaultMessage='Add All'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                </div>\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame'>\n                                        <List dense id='resource-wrapper'>\n                                            {Object.keys(selectedApiPaths).map((key) => {\n                                                const path = selectedApiPaths[key];\n                                                const labelId = `checkbox-list-label_${key}`;\n                                                return Object.keys(path).map((innerKey) => {\n                                                    const methodObj = path[innerKey];\n                                                    return CONSTS.HTTP_METHODS.includes(innerKey) && (\n                                                        <ListItem\n                                                            key={`${innerKey} - ${key}`}\n                                                            role={undefined}\n                                                            dense\n                                                        >\n                                                            <ListItemIcon style={{ minWidth: 35 }}>\n                                                                <Checkbox\n                                                                    edge='start'\n                                                                    checked={methodObj.checked}\n                                                                    tabIndex={-1}\n                                                                    disableRipple\n                                                                    onChange={() => updateCheckBox(key, innerKey)}\n                                                                    color='primary'\n                                                                    disabled={methodObj.allreadyAdded}\n                                                                    inputProps={\n                                                                        {\n                                                                            'aria-label': 'Select API resource',\n                                                                        }\n                                                                    }\n                                                                />\n                                                            </ListItemIcon>\n                                                            <ListItemText\n                                                                id={labelId + innerKey}\n                                                                primary={(\n                                                                    <div>\n                                                                        <MethodView\n                                                                            method={innerKey}\n                                                                            className={classes.methodView}\n                                                                        />\n                                                                        <span>{key}</span>\n                                                                    </div>\n                                                                )}\n                                                                secondary={\n                                                                    methodObj['x-auth-type']\n                                                                && methodObj['x-throttling-tier']\n                                                                && `${methodObj['x-auth-type']} - ${\n                                                                    methodObj['x-throttling-tier']\n                                                                }`\n                                                                }\n                                                                onClick={() => updateResourceTree(\n                                                                    {\n                                                                        target: key,\n                                                                        verb: innerKey,\n                                                                        apiId: selectedApi.id,\n                                                                        name: selectedApi.name,\n                                                                        version: selectedApi.version,\n                                                                    },\n                                                                    'add',\n                                                                )}\n                                                                className={classes.middleText}\n                                                            />\n                                                            <ListItemSecondaryAction>\n                                                                {methodObj.allreadyAdded && (\n                                                                    <Icon className={classes.inactiveIcon}>\n                                                                        chevron_right\n                                                                    </Icon>\n                                                                )}\n                                                                {!methodObj.allreadyAdded && (\n                                                                    <IconButton\n                                                                        edge='end'\n                                                                        aria-label='comments'\n                                                                        onClick={() => updateResourceTree(\n                                                                            {\n                                                                                target: key,\n                                                                                verb: innerKey,\n                                                                                apiId: selectedApi.id,\n                                                                                name: selectedApi.name,\n                                                                                version: selectedApi.version,\n                                                                            },\n                                                                            'add',\n                                                                        )}\n                                                                        size='large'>\n                                                                        <Icon>chevron_right</Icon>\n                                                                    </IconButton>\n                                                                )}\n                                                            </ListItemSecondaryAction>\n                                                        </ListItem>\n                                                    );\n                                                });\n                                            })}\n                                        </List>\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* Third column with  selected resources            */}\n                        {/* ************************************************ */}\n                        <Grid item xs={4}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle} />\n                                {api.name && (\n                                    <>\n                                        <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                            {api.name}\n                                        </Typography>\n                                    </>\n                                )}\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame rightFrame'>\n                                        {allApis.length > 0 && apiResources && apiResources.length === 0 && (\n                                            <div className={classes.messageWrapper}>\n                                                <Typography component='p'>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.ProductResources.ProductResourcesWorkspace.'\n                                                            + 'empty.title'}\n                                                        defaultMessage='Use the left side panel to add resources'\n                                                    />\n                                                </Typography>\n                                            </div>\n                                        )}\n                                        {apiResources\n                                        && apiResources.length > 0\n                                        && Object.keys(apiResources).map((key) => {\n                                            const apiResource = apiResources[key];\n                                            return (\n                                                <div key={apiResource.name}>\n                                                    <div className={classes.treeItemMain}>\n                                                        <Typography component='p'>\n                                                            {apiResource.name}\n                                                            {' - '}\n                                                            {apiResource.version}\n                                                        </Typography>\n                                                    </div>\n                                                    <div className={classes.treeItemMainWrapper}>\n                                                        {Object.keys(apiResource.operations).map((innerKey) => {\n                                                            const operation = apiResource.operations[innerKey];\n                                                            const { target, verb } = operation;\n                                                            return (\n                                                                <div\n                                                                    key={`${apiResource.apiId}_${verb}_${target}`}\n                                                                    className={classes.treeItem}\n                                                                >\n                                                                    <MethodView\n                                                                        method={verb}\n                                                                        className={classes.methodView}\n                                                                    />\n                                                                    <Typography variant='body2'>{target}</Typography>\n                                                                    <hr className={classes.hr} />\n                                                                    <IconButton\n                                                                        onClick={() => updateResourceTree(\n                                                                            {\n                                                                                target,\n                                                                                verb,\n                                                                                apiId: apiResource.apiId,\n                                                                                name: apiResource.name,\n                                                                                version: apiResource.version,\n                                                                            },\n                                                                            'remove',\n                                                                        )}\n                                                                        aria-label={\n                                                                            'delete resource ' + apiResource.name\n                                                                        }\n                                                                        size='large'>\n                                                                        <Icon>\n                                                                            delete\n                                                                        </Icon>\n                                                                    </IconButton>\n                                                                </div>\n                                                            );\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Root>\n    );\n}\nProductResourcesEdit.propTypes = {\n    apiResources: PropTypes.instanceOf(Array).isRequired,\n    setApiResources: PropTypes.func.isRequired,\n    isStateCreate: PropTypes.isRequired,\n    api: PropTypes.isRequired,\n    resourceNotFountMessage: PropTypes.string.isRequired,\n};\nexport default ProductResourcesEdit;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n *\n * Convert raw byte values to human readable format\n * @param {Number} bytes number of bytes\n * @param {boolean} [si=false]\n * @returns {String} Human readable string format\n */\nexport function humanFileSize(bytesParam, si = false) {\n    let bytes = bytesParam; // To prevent `no-param-reassign` eslint rule violation\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return bytes + ' B';\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n    return bytes.toFixed(1) + ' ' + units[u];\n}\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '100px 20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n};\n\nconst activeStyle = {\n    borderColor: '#2196f3',\n};\n\nconst acceptStyle = {\n    borderColor: '#00e676',\n};\n\nconst rejectStyle = {\n    borderColor: '#ff1744',\n};\n\n/**\n *\n * Provide a class friendly Dropzone wrapper using hooks.\n * @export\n * @returns\n */\nexport default function DropZoneLocal(props) {\n    const {\n        message, onDrop, error, children, accept, ariaLabel,\n    } = props;\n    const dropZoneObject = useDropzone({ onDrop });\n    const {\n        getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject,\n    } = dropZoneObject;\n\n    const style = useMemo(\n        () => ({\n            ...baseStyle,\n            ...(isDragActive ? activeStyle : {}),\n            ...(isDragAccept ? acceptStyle : {}),\n            ...(isDragReject ? rejectStyle : {}),\n        }),\n        [isDragActive, isDragReject, error],\n    );\n    const theme = useTheme();\n\n    const containerStyles = {\n        fontFamily: theme.typography.fontFamily,\n        textAlign: 'center',\n    };\n\n    return (\n        <section className='container' style={containerStyles}>\n            <div {...getRootProps({ style })}>\n                <input\n                    // In accordance with https://www.w3.org/TR/WCAG20-TECHS/ARIA14.html\n                    aria-label={ariaLabel}\n                    {...getInputProps()}\n                    multiple={false}\n                    accept={accept}\n                />\n                {children || message}\n            </div>\n        </section>\n    );\n}\nDropZoneLocal.defaultProps = {\n    message: \"Drag 'n' drop some files here, or click to select files\",\n    onDrop: () => {},\n    showFilesList: true,\n    children: null,\n    error: false,\n    accept: '*',\n};\nDropZoneLocal.propTypes = {\n    message: PropTypes.string,\n    onDrop: PropTypes.func,\n    accept: PropTypes.string,\n    showFilesList: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.shape({}))]),\n    error: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({})]),\n};\n","/**\n * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport API from 'AppData/api';\n\nimport APIClientFactory from './APIClientFactory';\nimport Utils from './Utils';\nimport Resource from './Resource';\n\n/**\n * An abstract representation of a Scopes\n */\nclass Wsdl extends Resource {\n    /**\n     * Validate a WSDL file or an archive\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateFileOrArchive(file) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        const requestBody = {\n            requestBody: {\n                file,\n            },\n        };\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition(null, requestBody);\n        });\n    }\n\n    /**\n     * Validate a WSDL URL\n     *\n     * @static\n     * @param {*} url WSDL URL\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateUrl(url) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition(\n                {},\n                {\n                    requestBody: { url },\n                },\n            );\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} url WSDL url\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByUrl(url, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition(\n                {},\n                {\n                    requestBody: {\n                        url,\n                        additionalProperties: JSON.stringify(additionalProperties),\n                        implementationType,\n                    },\n                },\n            );\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByFileOrArchive(file, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition(\n                null,\n                {\n                    requestBody: {\n                        file,\n                        additionalProperties: JSON.stringify(additionalProperties),\n                        implementationType,\n                    },\n                },\n            );\n\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n}\n\nexport default Wsdl;\n","/* eslint-disable */\n/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under\n * this license, please see the license as well as any agreement you’ve\n * entered into with WSO2 governing the purchase of this software and any\n * associated services.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    ISpectralDiagnostic,\n} from '@stoplight/spectral-core';\nimport { oas } from '@stoplight/spectral-rulesets';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@mui/material/Box';\nimport { spectralSeverityMap, spectralSeverityNames } from \"./Linting\"\nimport { Grid, Tooltip, Typography } from '@mui/material';\nimport { ToggleButton, ToggleButtonGroup } from '@mui/lab';\nconst PREFIX = 'APILintingSummary';\n\nconst classes = {\n    activeButton: `${PREFIX}-activeButton`\n};\n\nconst StyledBox = styled(Box)((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.activeButton}`]: {\n        \"&:selected\": {\n            backgroundColor: theme.palette.background.default,\n        }\n    }\n}));\n\n// TODO tmkasun: Possible to extend AsyncAPI rule set as well\nconst defaultRuleSet = { extends: [oas], rules: {} };\ntype APILintingProps = {\n    linterResults: ISpectralDiagnostic[],\n    handleChange: Function,\n};\n\nexport const APILintingSummary = (props: APILintingProps) => {\n    const { linterResults, handleChange } = props;\n\n    const [selectedSeverity, setSelectedSeverity] = useState(null);\n    const severityCounts: { [key: number]: number } = {};\n    \n    if (linterResults) {\n        linterResults.forEach(({ severity }) => {\n            severityCounts[severity] = severityCounts[severity] + 1 || 1;\n        });\n    }\n    \n    return (\n        <StyledBox ml={3}>\n            {linterResults === null && (\n                <FormattedMessage\n                    id=\"Apis.Details.APIDefinition.Linting.APILintingSummary.loading\"\n                    defaultMessage=\"Linting . . .\"\n                />\n            )}\n            {linterResults && (\n                <Tooltip title={\n                    Object.entries(spectralSeverityNames).map(([severity, name]) => {\n                        return `${name}:${severityCounts[Number(severity)]||0}${(Number(severity) !== 3) ? \", \": \"\"}` || '-';\n                    })\n                }>\n                    <ToggleButtonGroup\n                        exclusive\n                        value={selectedSeverity}\n                        size=\"small\"\n                        onChange={(event, value) => { \n                            setSelectedSeverity(value);\n                            handleChange(event, value) }}>\n                        {Object.entries(spectralSeverityMap).map(([severity, component]) => (\n                            <ToggleButton\n                                key={Math.random()}\n                                value={String(severity)}\n                            >\n                                <Box ml={1} display=\"flex\">\n                                    {component}\n                                    <Grid item>\n                                        <Box maxWidth='2rem'>\n                                            <Typography noWrap>\n                                                &nbsp;{severityCounts[Number(severity)] || 0}\n                                            </Typography>\n                                        </Box>\n                                    </Grid>\n                                </Box>\n                            </ToggleButton>\n                        ))}\n                    </ToggleButtonGroup>\n                </Tooltip>\n            )}\n        </StyledBox>\n    );\n};\nexport default APILintingSummary;\n","/* eslint-disable */\n/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under\n * this license, please see the license as well as any agreement you’ve\n * entered into with WSO2 governing the purchase of this software and any\n * associated services.\n */\n\nimport React from 'react';\nimport API from 'AppData/api.js';\nimport {\n    Spectral,\n    ISpectralDiagnostic,\n} from '@stoplight/spectral-core';\nimport *  as spectralFunc from \"@stoplight/spectral-functions\";\nimport { oas } from '@stoplight/spectral-rulesets';\nimport { green, orange } from '@mui/material/colors';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport InfoIcon from '@mui/icons-material/Info';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage } from 'react-intl';\n\n/** @type DiagnosticSeverity \n * \n * \nSomething not allowed by the rules of a language or other means.\n    Error = 0,\nSomething suspicious but allowed.\n    Warning = 1,\nSomething to inform about but not a problem.\n    Information = 2,\nSomething to hint to a better way of doing it, like proposing a refactoring.\n    Hint = 3\n*/\n\nconst spectralFunctions: { [key: string]: any} = {\n    \"alphabetical\": spectralFunc.alphabetical,\n    \"casing\": spectralFunc.casing,\n    \"defined\": spectralFunc.defined,\n    \"enumeration\": spectralFunc.enumeration,\n    \"falsy\": spectralFunc.falsy,\n    \"length\": spectralFunc.length,\n    \"pattern\":spectralFunc.pattern,\n    \"truthy\": spectralFunc.truthy,\n    \"undefined\": spectralFunc.undefined,\n    \"unreferencedReusableObject\": spectralFunc.unreferencedReusableObject,\n    \"xor\": spectralFunc.xor,\n    \"schema\": spectralFunc.schema,\n}\n\nexport const spectralSeverityMap: { [key: number]: JSX.Element } = {\n    0: <ErrorIcon color=\"error\" />,\n    1: <WarningIcon style={{ color: orange[500] }} />,\n    2: <InfoIcon color=\"primary\" />,\n    3: <HelpOutlineIcon style={{ color: green[500] }} />,\n};\n\nexport const spectralSeverityNames: { [key: number]: string } = {\n    0: \"Errors\",\n    1: \"Warnings\",\n    2: \"Info\",\n    3: \"Hints\"\n};\n\nexport async function getLinterResultsFromContent(swagger: string|undefined) {\n    let validationResults: ISpectralDiagnostic[] = [];\n    \n    if (swagger) {\n        // Validate againt default ruleset by Spectral\n        let defaultRuleSet = { extends: [oas], rules: {} };\n        const linter = new Spectral();\n        linter.setRuleset(defaultRuleSet);\n        \n        try {\n            \n            await linter.run(swagger).then((results)=> {\n                if (results) {\n                    validationResults = validationResults.concat(results);\n                }\n            });\n        } catch (err) {\n            console.error(\"OpenAPI linter default ruleset validation failed\", err);\n            Alert.error(\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.Linting.Linting.default.ruleset.validation.failed'\n                defaultMessage='OpenAPI linter default ruleset validation failed'\n            />);\n        }\n\n\n        // Validate againt custom ruleset defined in tenant config\n        let customRuleset:JSON = await API.getLinterCustomRules().then((LinterCustomRuleset: JSON) => {\n            return LinterCustomRuleset;\n        }).catch((error: any) => {\n            console.log(\"Error retrieving custom linter rules\", error);\n            Alert.error(\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.Linting.Linting.error.retrieving.custom.rules'\n                defaultMessage='Error retrieving custom linter rules'\n            />);\n        });\n        if (customRuleset) {\n            //Parse JSON to JS object to support spectral\n            const parsedCustomRuleset = JSON.parse(\n                JSON.stringify(customRuleset), \n                function (key, value) {\n                    if (key === \"function\") {\n                        return spectralFunctions[value];\n                    } else {\n                        return value;\n                    }\n                }\n            );\n\n            linter.setRuleset(parsedCustomRuleset);\n            \n            try {\n                await linter.run(swagger).then((results)=> {\n                    if (results) {\n                        validationResults = validationResults.concat(results);\n                    }\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    console.error(\"OpenAPI linter custom ruleset validation failed\\n\", error, error.stack);\n                }\n                Alert.error(\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.Linting.Linting.custom.ruleset.validation.failed'\n                        defaultMessage='OpenAPI linter custom ruleset validation failed'\n                    />);\n            }\n        }\n\n        //Sort linter results order based of severity\n        validationResults = validationResults.sort( function compare(a, b) {\n            if (a.severity < b.severity){\n              return -1;\n            }\n            if (a.severity > b.severity){\n              return 1;\n            }\n            return 0;\n        });\n    }\n    return validationResults;\n}\n"],"names":["classes","mandatoryStar","concat","Root","styled","_ref","theme","_defineProperty","color","palette","error","main","ProvideAsyncAPI","props","apiInputs","inputsDispatcher","onValidate","isFileInput","inputType","inputValue","_useState2","_slicedToArray","useState","isValid","setValidity","_useState4","isValidating","setIsValidating","_useState6","validationErrors","setValidationErrors","_useState8","gatewayVendor","setGatewayVendor","intl","useIntl","onDrop","files","file","pop","validFile","API","validateAsyncAPIByFile","then","response","_response$body","body","isValidFile","info","errors","action","value","_objectSpread","message","formatMessage","id","defaultMessage","catch","console","finally","validateURL","state","APIValidation","url","required","validate","validateAsyncAPIByUrl","returnContent","_response$body2","isValidURL","content","useEffect","INPUT_TYPES","FILE","URL","isInvalidURL","Boolean","urlStateEndAdornment","React","InputAdornment","position","CircularProgress","undefined","ErrorOutlineIcon","fontSize","CheckIcon","Grid","container","item","xs","sx","mb","FormControl","component","FormLabel","className","FormattedMessage","RadioGroup","onChange","event","target","FormControlLabel","control","Radio","label","md","Banner","onClose","disableActions","dense","paperProps","elevation","type","List","ListItem","key","path","ListItemAvatar","Avatar","InsertDriveFile","ListItemText","primary","humanFileSize","size","ListItemSecondaryAction","IconButton","edge","onClick","DeleteIcon","DropZoneLocal","accept","values","break","Button","variant","mt","TextField","autoFocus","placeholder","fullWidth","margin","_ref3","InputLabelProps","shrink","InputProps","onBlur","_ref4","endAdornment","helperText","Chip","icon","CheckCircleSharpIcon","style","defaultProps","propTypes","PropTypes","isRequired","ProvideGraphQL","validateGraphQLFile","graphQLInfo","ariaLabel","ValidationResults","isLinting","linterResults","onLinterLineSelect","expandValidationErrors","setExpandValidationErrors","expandLinterResults","setExpandLinterResults","linterSelectedSeverity","setLinterSelectedSeverity","ListItemIcon","length","Accordion","A","expanded","AccordionSummary","expandIcon","ExpandMore","direction","justifyContent","alignItems","Typography","fontWeight","AccordionDetails","map","Box","description","pt","APILintingSummary","handleChange","stopPropagation","padding","LinterUI","filter","severity","Number","severityMap","handleRowClick","line","ProvideOpenAPI","setLinterResults","_useState10","setIsLinting","lint","getLinterResultsFromContent","results","reset","validateURLDebounced","useCallback","debounce","newURL","validateOpenAPIByUrl","formattedContent","definition","result","JSON","parse","_typeof","err","log","hasJSONStructure","stringify","YAML","validateOpenAPIByFile","endsWith","read","FileReader","readAsText","onloadend","_read$result","toString","disabled","ProvideWSDL","isGenerateRESTAPI","isError","isCreateMode","mode","handleWSDLValidationResponse","isWSDLValid","success","handleWSDLValidationErrorResponse","dropBoxControlLabel","spacing","arguments","Wsdl","validateFileOrArchive","validateUrl","PREFIX","tableCell","headerTableCell","tableRow","tableWrapper","headerTableRow","StyledPaper","Paper","border","background","paper","backgroundColor","hover","cursor","width","display","_React$useState2","page","setPage","_React$useState4","rowsPerPage","setRowsPerPage","columns","minWidth","align","rows","index","range","start","code","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","column","TableCell","TableBody","slice","row","format","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","DEFAULT_API_SECURITY_OAUTH2","API_SECURITY_BASIC_AUTH","API_SECURITY_API_KEY","API_SECURITY_MUTUAL_SSL","API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY","API_SECURITY_MUTUAL_SSL_MANDATORY","API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_OPTIONAL","API_SECURITY_MUTUAL_SSL_OPTIONAL","API_SECURITY_KEY_TYPE_PRODUCTION","API_SECURITY_KEY_TYPE_SANDBOX","ALL_AUDIENCES_ALLOWED","MethodView","Configurations","useTheme","method","chipColor","custom","resourceChipColors","toLowerCase","chipTextColor","getContrastText","height","searchWrapper","apiWrapper","ResourceWrapper","SelectedResourceWrapper","leftMost","rightMost","colTitle","treeItemMain","treeItemMainWrapper","treeItem","hr","methodView","middleText","selectedApi","selectedTitle","buttonWrapper","selectedApiDescription","messageWrapper","tootBar","inactiveIcon","_ref2","marginTop","borderRadius","overflowY","marginLeft","marginRight","grey","common","white","overflowX","minHeight","paddingLeft","flex","textDecorate","ProductResourcesEdit","apiResources","setApiResources","isStateCreate","api","resourceNotFountMessage","allApis","setAllApis","notFound","setNotFound","searchText","setSearchText","selectedApiPaths","setSelectedApiPaths","setSelectedApi","_useState12","fromSearch","setFromSearch","apiRestClient","filterAPIs","text","composeQuery","trim","composeQueryJSON","queryString","limit","offset","search","all","query","isValidHttpVerb","innerKey","addPropsToSelectedApiPaths","paths","apiId","latestApiResources","Object","keys","methodObj","checked","verb","resourceFound","resourcekey","apiResource","operations","operationKey","operation","allreadyAdded","getApiSwagger","apiSelected","getSwagger","obj","status","doRedirectToLogin","updateResourceTree","resourceToAdd","inputApiResources","updateStateHere","newApiResources","cloneDeep","name","version","newResource","toUpperCase","authType","throttlingPolicy","scopes","apiFound","indexA","operationFound","indexB","splice","push","addSelectedResourcesToTree","addAll","filteredList","list","theApi","lifeCycleStatus","gatewayType","ResourceNotFound","apiObj","labelId","role","button","secondary","context","onKeyDown","Icon","VerticalDivider","CONSTS","HTTP_METHODS","includes","Checkbox","tabIndex","disableRipple","prevSelectedApiPaths","updateCheckBox","inputProps","Array","bytesParam","si","bytes","thresh","Math","abs","units","u","toFixed","baseStyle","flexDirection","borderWidth","borderColor","borderStyle","outline","transition","activeStyle","acceptStyle","rejectStyle","children","dropZoneObject","useDropzone","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","containerStyles","fontFamily","typography","textAlign","_extends","multiple","showFilesList","_Resource","_classCallCheck","_callSuper","_inherits","apiClient","APIClientFactory","getAPIClient","Utils","getCurrentEnvironment","CONST","API_CLIENT","client","requestBody","apis","Validation","validateWSDLDefinition","additionalProperties","implementationType","APIs","importWSDLDefinition","Resource","StyledBox","default","selectedSeverity","setSelectedSeverity","severityCounts","forEach","ml","title","entries","exclusive","String","maxWidth","noWrap","random","spectralFunctions","spectralSeverityMap","spectralSeverityNames","swagger","validationResults","defaultRuleSet","extends","rules","linter","Spectral","setRuleset","run","customRuleset","getLinterCustomRules","LinterCustomRuleset","parsedCustomRuleset","Error","stack","sort","a","b"],"sourceRoot":""}